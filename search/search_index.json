{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"<code>supabase/supavisor</code>","text":"<p>Documentation: https://supabase.github.io/supavisor</p> <p>Source Code: https://github.com/supabase/supavisor</p>"},{"location":"#overview","title":"Overview","text":"<p>Supavisor is an open source scalable connection pooler for Postgres.</p> <p>Review the readme for a detailed overview.</p>"},{"location":"faq/","title":"FAQ","text":"<p>Answers to frequently asked questions.</p>"},{"location":"faq/#what-happens-when-i-hit-my-connection-limit","title":"What happens when I hit my connection limit?","text":"<p>The connection (or client) limit is set by the <code>default_max_clients</code> on the <code>tenant</code> record or <code>max_clients</code> on the <code>user</code>.</p> <p>Say your connection limit is 1000. When you try to connect client number 1001 this client will receive the error <code>Max client connections reached</code> which will be returned as a Postgres error to your client in the wire protocol and subsequently should show up in your exception monitoring software.</p>"},{"location":"faq/#does-supavisor-support-prepared-statements","title":"Does Supavisor support prepared statements?","text":"<p>As of 1.0 Supavisor supports prepared statements. Supavisor will detect <code>prepare</code> statements and issue those to all database connections. All clients will then be able to address those prepared statements by name when issuing <code>execute</code> statements.</p>"},{"location":"faq/#why-do-you-route-connections-to-a-single-supavisor-node-when-deployed-as-a-cluster","title":"Why do you route connections to a single Supavisor node when deployed as a cluster?","text":"<p>Supavisor can run as a cluster of nodes for high availability. The first node to receive a connection from a tenant spins up the connection pool on that node. Connections coming in to other nodes will route data do the owner node of the tenant pool.</p> <p>We could run one pool per node and divide the database connection pool by N nodes but then we'd have to keep connection counts to the database in sync across all nodes. While not impossible at all, there could be some delay here temporarily causing more connections to the database than we want.</p> <p>By running one pool on one node in a cluster for a tenant we can guarantee that the amount of connections to the database will be the <code>default_pool_size</code> set on the tenant.</p> <p>Also running N pools on N nodes for N clients will not scale horizontally as well because all nodes will be doing all the same work of issuing database connections to clients. While not a lot of overhead, at some point this won't scale and we'd have to run multiple independant clusters and route tenants to clusters to scale horizontally.</p>"},{"location":"configuration/pool_modes/","title":"Pool Modes","text":"<p>Configure the <code>mode_type</code> on the <code>user</code> to set how Supavisor connection pools will behave.</p> <p>The <code>mode_type</code> can be one of:</p> <ul> <li><code>transaction</code></li> <li><code>session</code></li> <li><code>native</code></li> </ul>"},{"location":"configuration/pool_modes/#transaction-mode","title":"Transaction Mode","text":"<p><code>transaction</code> mode assigns a connection to a client for the duration of a single transaction.</p>"},{"location":"configuration/pool_modes/#session-mode","title":"Session Mode","text":"<p><code>session</code> mode assigns a connection to a client for the duration of the client connection.</p>"},{"location":"configuration/pool_modes/#native-mode","title":"Native Mode","text":"<p><code>native</code> mode proxies a client to the database as if it was directly connected.</p> <p>This mode is typically needed to run migrations.</p>"},{"location":"configuration/tenants/","title":"Tenants","text":"<p>All configuration options for a tenant are stored on the <code>tenant</code> record in the metadata database used by Supavisor.</p> <p>A <code>tenant</code> is looked via the <code>external_id</code> discovered in the incoming client connection.</p> <p>All <code>tenant</code> fields and their types are defined in the <code>Supavisor.Tenants.Tenant</code> module.</p>"},{"location":"configuration/tenants/#field-descriptions","title":"Field Descriptions","text":"<p><code>db_host</code> - the hostname of the server to connect to</p> <p><code>db_port</code> - the port of the server to connect to</p> <p><code>db_database</code> - the database of the Postgres instance</p> <p><code>external_id</code> - an id used in an external system used to lookup a tenant</p> <p><code>default_parameter_status</code> - the default initial connection parameters to use</p> <p><code>ip_version</code> - the ip address type of the connection to the database server</p> <p><code>upstream_ssl</code> - enforce an SSL connection on the tenant database</p> <p><code>upstream_verify</code> - how to verify the ssl certificate</p> <p><code>upstream_tls_ca</code> - the ca certificate to use when connecting to the database server</p> <p><code>enforce_ssl</code> - enforce an SSL connection on client connections</p> <p><code>require_user</code> - require client connection credentials to match <code>user</code> credentials in the metadata database</p> <p><code>auth_query</code> - the query to use when matching credential agains a client connection</p> <p><code>default_pool_size</code> - the default size of the database pool</p> <p><code>sni_hostname</code> - can be used to match a connection to a specific <code>tenant</code> record</p> <p><code>default_max_clients</code> - the default limit of client connections</p> <p><code>client_idle_timeout</code> - the maximum duration of an idle client connection</p> <p><code>allow_list</code> - a list of CIDR ranges which are allowed to connect</p>"},{"location":"configuration/users/","title":"Users","text":"<p>All configuration options for a tenant <code>user</code> are stored on the <code>user</code> record in the metadata database used by Supavisor.</p> <p>All <code>user</code> fields and their types are defined in the <code>Supavisor.Tenants.User</code> module.</p>"},{"location":"configuration/users/#field-descriptions","title":"Field Descriptions","text":"<p><code>db_user</code> - user to match against the client connection user</p> <p><code>db_password</code> - password to match against the client connection password</p> <p><code>db_user_alias</code> - client connection user will also match this user record</p> <p><code>is_manager</code> - these credentials are used to perform management queries against the tenant database</p> <p><code>mode_type</code> - the pool mode type</p> <p><code>pool_size</code> - the database connection pool size used to override <code>default_pool_size</code> on the <code>tenant</code></p> <p><code>pool_checkout_timeout</code> - the maximum duration allowed for a client connection to checkout a database connection from the pool</p> <p><code>max_clients</code> - the maximum amount of client connections allowed for this user</p>"},{"location":"connecting/authentication/","title":"Authentication","text":"<p>When a client connection is established Supavisor needs to verify the credentials of the connection.</p> <p>Credential verificiation is done either via <code>user</code> records or an <code>auth_query</code>.</p>"},{"location":"connecting/authentication/#tenant-user-record","title":"Tenant User Record","text":"<p>If no <code>auth_query</code> exists on the <code>tenant</code> record credentials will be looked up from a <code>user</code> and verified against the client connection string credentials.</p> <p>There must be one or more <code>user</code> records for a <code>tenant</code> where <code>is_manager</code> is <code>false</code>.</p>"},{"location":"connecting/authentication/#authentication-query","title":"Authentication Query","text":"<p>If the <code>user</code> in the client connection is not found for a <code>tenant</code> it will use the <code>user</code> where <code>is_manager</code> is <code>true</code> and the <code>auth_query</code> on the <code>tenant</code> to return matching credentials from the tenant database.</p> <p>A simple <code>auth_query</code> can be:</p> <pre><code>SELECT rolname, rolpassword FROM pg_authid WHERE rolname=$1\n</code></pre> <p>Alternatively, create a function to return a username and password for a user:</p> <pre><code>CREATE USER supavisor;\n\nREVOKE ALL PRIVILEGES ON SCHEMA public FROM supavisor;\n\nCREATE SCHEMA supavisor AUTHORIZATION supavisor;\n\nCREATE OR REPLACE FUNCTION supavisor.get_auth(p_usename TEXT)\nRETURNS TABLE(username TEXT, password TEXT) AS\n$$\nBEGIN\n    RAISE WARNING 'Supavisor auth request: %', p_usename;\n\n    RETURN QUERY\n    SELECT usename::TEXT, passwd::TEXT FROM pg_catalog.pg_shadow\n    WHERE usename = p_usename;\nEND;\n$$ LANGUAGE plpgsql SECURITY DEFINER;\n\nREVOKE ALL ON FUNCTION supavisor.get_auth(p_usename TEXT) FROM PUBLIC;\nGRANT EXECUTE ON FUNCTION supavisor.get_auth(p_usename TEXT) TO supavisor;\n</code></pre> <p>Update the <code>auth_query</code> on the <code>tenant</code> and it will use this query to match against client connection credentials.</p> <pre><code>SELECT * FROM supavisor.get_auth($1)\n</code></pre>"},{"location":"connecting/overview/","title":"Overview","text":"<p>To connect to a tenant database Supavisor needs to look up the tenant with an <code>external_id</code>.</p> <p>You can connect to Supavisor just like you connect to Postgres except we need to include the <code>external_id</code> in the connection string.</p> <p>Supavisor parses the <code>external_id</code> from a connection in one three ways:</p> <ul> <li>The username</li> <li>Server name identification</li> <li><code>options</code> parameters</li> </ul> <p>\ud83d\udcd8 Examples</p> <p>In the following examples our <code>external_id</code> is <code>dev_tenant</code>.</p>"},{"location":"connecting/overview/#username","title":"Username","text":"<p>Include the <code>external_id</code> in the username. The <code>external_id</code> is found after the <code>.</code> (dot) in the username:</p> <pre><code>psql postgresql://postgres.dev_tenant:postgres@localhost:6543/postgres\n</code></pre>"},{"location":"connecting/overview/#server-name-indication","title":"Server name indication","text":"<p>The subdomain of the SNI from the TLS handshake:</p> <pre><code>dev_tenant.supabase.co\n</code></pre>"},{"location":"connecting/overview/#options-parameters","title":"Options parameters","text":"<p>Include the <code>external_id</code> as the <code>reference</code> in the <code>options</code> parameters:</p> <pre><code>psql postgresql://postgres:postgres@localhost:6543/postgres&amp;options=reference%3Ddev_tenant\n</code></pre>"},{"location":"deployment/fly/","title":"Deploy with Fly.io","text":"<p>The <code>toml.yaml</code> file should be in the <code>deploy/fly</code> directory of Supavisor.</p> <p>Type the following command in your terminal:</p> <pre><code>fly launch\n</code></pre> <p>Choose a name for your app when prompted, then answer \"yes\" to the following question:</p> <pre><code>Would you like to copy its configuration to the new app? (y/N)\n</code></pre> <p>Next, select an organization and choose a region. You don't need to deploy the app yet.</p> <p>Since the pooler uses an additional port (7654) for the PostgreSQL protocol, you need to reserve an IP address:</p> <pre><code>fly ips allocate-v4\n</code></pre> <p>Set your app's secrets by running the following command:</p> <pre><code>fly secrets set DATABASE_URL=\"ecto://postgres:postgres@localhost:6432/postgres\" \\\nVAULT_ENC_KEY=\"some_vault_secret\" \\\nAPI_JWT_SECRET=\"some_api_secret\" \\\nMETRICS_JWT_SECRET=\"some_metrics_secret\" \\\nSECRET_KEY_BASE=\"some_kb_secret\"\n</code></pre> <p>Replace the example values with your actual secrets.</p> <p>Finally, deploy your app using the following command:</p> <pre><code>fly deploy\n</code></pre> <p>This will deploy your app on Fly.io</p>"},{"location":"development/docs/","title":"Docs","text":"<p>Documentation is managed with mkdocs.</p>"},{"location":"development/docs/#adding-documentation","title":"Adding documentation","text":"<p>Edit the documentation in:</p> <p><code>/docs</code></p> <p>Edit the documentation nav in:</p> <p><code>/mkdocs.yaml</code></p> <p>Build and serve the documentation locally with:</p> <p><code>mkdocs serve</code></p> <p>Production documentation is built on merge into <code>main</code> with the GitHub Action:</p> <p><code>/.github/workflows/docs.yml</code></p>"},{"location":"development/installation/","title":"Installation","text":"<p>Before starting, set up the database where Supavisor will store tenants' data. The following command will pull a Docker image with PostgreSQL 14 and run it on port 6432:</p> <pre><code>docker-compose -f ./docker-compose.db.yml up\n</code></pre> <p><code>Supavisor</code> stores tables in the <code>supavisor</code> schema. The schema should be automatically created by the <code>dev/postgres/00-setup.sql</code> file. If you encounter issues with migrations, ensure that this schema exists.</p> <p>Next, get dependencies and apply migrations:</p> <pre><code>mix deps.get &amp;&amp; mix ecto.migrate --prefix _supavisor --log-migrator-sql\n</code></pre>"},{"location":"development/setup/","title":"Setup","text":"<p>Launch the Supavisor application:</p> <pre><code>make dev\n</code></pre> <p>Start the Supavisor database to store tenant information:</p> <pre><code>make db_start &amp;&amp; make db_migrate\n</code></pre> <p>You need to add tenants to the database. For example, the following request will add the <code>dev_tenant</code> with credentials to the database set up earlier.</p> <pre><code>curl  -X PUT \\\n  'http://localhost:4000/api/tenants/dev_tenant' \\\n  --header 'Accept: */*' \\\n  --header 'User-Agent: Thunder Client (https://www.thunderclient.com)' \\\n  --header 'Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJvbGUiOiJhbm9uIiwiaWF0IjoxNjQ1MTkyODI0LCJleHAiOjE5NjA3Njg4MjR9.M9jrxyvPLkUxWgOYSf5dNdJ8v_eRrq810ShFRT8N-6M' \\\n  --header 'Content-Type: application/json' \\\n  --data-raw '{\n  \"tenant\": {\n    \"db_host\": \"localhost\",\n    \"db_port\": 6432,\n    \"db_database\": \"postgres\",\n    \"ip_version\": \"auto\",\n    \"enforce_ssl\": false,\n    \"require_user\": false,\n    \"auth_query\": \"SELECT rolname, rolpassword FROM pg_authid WHERE rolname=$1;\",\n    \"users\": [\n      {\n        \"db_user\": \"postgres\",\n        \"db_password\": \"postgres\",\n        \"pool_size\": 20,\n        \"mode_type\": \"transaction\",\n        \"is_manager\": true\n      }\n    ]\n  }\n}'\n</code></pre> <p>Now, it's possible to connect through the proxy. By default, Supavisor uses port <code>6543</code> for transaction mode and <code>5432</code> for session mode:</p> <pre><code>psql postgresql://postgres.dev_tenant:postgres@localhost:6543/postgres\n</code></pre> <p> The tenant's ID is incorporated into the username and separated by the <code>.</code> symbol. For instance, for the username <code>some_username</code> belonging to the tenant <code>some_tenant</code>, the modified username will be <code>some_username.some_tenant</code>. This approach enables the system to support multi-tenancy on a single IP address.</p> <p>As a general note, if you are not using the <code>Makefile</code> you will have to set a <code>VAULT_ENC_KEY</code> which should be at least 32 bytes long.</p>"},{"location":"development/setup/#general-commands","title":"General Commands","text":"<p>Here's an overview of the commands and the options you can use.</p>"},{"location":"development/setup/#addupdate-tenant","title":"Add/update tenant","text":"<pre><code>curl -X PUT \\\n  'http://localhost:4000/api/tenants/dev_tenant' \\\n  --header 'Accept: application/json' \\\n  --header 'Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJvbGUiOiJhbm9uIiwiaWF0IjoxNjQ1MTkyODI0LCJleHAiOjE5NjA3Njg4MjR9.M9jrxyvPLkUxWgOYSf5dNdJ8v_eRrq810ShFRT8N-6M' \\\n  --header 'Content-Type: application/json' \\\n  --data-raw '{\n  \"tenant\": {\n    \"db_host\": \"localhost\",\n    \"db_port\": 6432,\n    \"db_database\": \"postgres\",\n    \"ip_version\": \"auto\", // \"auto\" | \"v4\" | \"v6\"\n    \"require_user\": true, // true | false\n    \"upstream_ssl\": true, // true | false,\n    \"enforce_ssl\": false, // true | false,\n    \"upstream_verify\": \"peer\", // \"none\" | \"peer\"\n    \"upstream_tls_ca\": \"-----BEGIN CERTIFICATE-----\\nblalblalblablalblalblaba\\n-----END CERTIFICATE-----\\n\", // \"\",\n    \"default_max_clients\": 200,\n    \"default_pool_size\": 15,\n    \"users\": [\n      {\n        \"db_user\": \"postgres\",\n        \"db_password\": \"postgres\",\n        \"mode_type\": \"transaction\",\n        \"pool_checkout_timeout\": 100,\n        \"pool_size\": 10\n      }\n    ]\n  }\n}'\n</code></pre>"},{"location":"development/setup/#delete-tenant","title":"Delete tenant","text":"<p>To delete a tenant, send the following request:</p> <pre><code>curl -X DELETE \\\n  'http://localhost:4000/api/tenants/dev_tenant' \\\n  --header 'Accept: application/json' \\\n  --header 'Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJvbGUiOiJhbm9uIiwiaWF0IjoxNjQ1MTkyODI0LCJleHAiOjE5NjA3Njg4MjR9.M9jrxyvPLkUxWgOYSf5dNdJ8v_eRrq810ShFRT8N-6M'\n</code></pre> <p>API documentation can be found at http://localhost:4000/swaggerui</p>"},{"location":"migrating/pgbouncer/","title":"from PgBouncer","text":"<p>Migrating from PgBouncer is straight forward once a Supavisor cluster is setup and a database has been added as a <code>tenant</code>.</p> <p>No application level code changes should be required other than a connection string change. Both <code>transaction</code> and <code>session</code> pool mode behavior for Supavisor is the same as PgBouncer.</p> <p>One caveat during migration is running two connection poolers at the same time.</p> <p>When rolling out a connection string change to your application you will momentarily need to support two connection pools to Postgres.</p>"},{"location":"migrating/pgbouncer/#check-postgres-connection-limit","title":"Check Postgres connection limit","text":"<p>Lets see what our connection limit is set to on our Postgres database:</p> <pre><code>show max_connections;\n</code></pre>"},{"location":"migrating/pgbouncer/#check-used-connections","title":"Check used connections","text":"<p>Lets see how many connections we're currently using:</p> <pre><code>select count(*) from pg_stat_activity;\n</code></pre>"},{"location":"migrating/pgbouncer/#change-postgres-max_connections","title":"Change Postgres <code>max_connections</code>","text":"<p>Based on the responses above configure the <code>default_pool_size</code> accordingly or increase your <code>max_connections</code> limit on Postgres to accomadate two connection poolers.</p> <p>e.g if you're using 30 connections out of 100 and you set your <code>default_pool_size</code> to 20 you have enough connections to run a new Supavisor pool along side your PgBouncer pool.</p> <p>If you are using 90 connections out of 100 and your <code>default_pool_size</code> is set to 20 you will have problems during the deployment of your Supavisor connection string because you will hit your Postgres <code>max_connections</code> limit.</p>"},{"location":"migrating/pgbouncer/#verify-supavisor-connections","title":"Verify Supavisor connections","text":"<p>Once we've got Supavisor started we can verify it's using the amount of connections we set for <code>default_pool_size</code>:</p> <pre><code>SELECT\n  COUNT(*) as count,\n  usename,\n  application_name\nFROM pg_stat_activity\nWHERE application_name ILIKE '%Supavisor%'\nGROUP BY\n  usename,\n  application_name\nORDER BY application_name DESC;\n</code></pre>"},{"location":"migrating/pgbouncer/#celebrate","title":"Celebrate!","text":"<p>You deserve it \ud83e\udd19</p>"},{"location":"monitoring/metrics/","title":"Metrics","text":"<p>The metrics feature provides a range of metrics in the Prometheus format. The main modules involved in this implementation are:</p> <ul> <li><code>Supavisor.Monitoring.PromEx</code></li> <li><code>Supavisor.PromEx.Plugins.OsMon</code></li> <li><code>Supavisor.PromEx.Plugins.Tenant</code></li> <li><code>Supavisor.Monitoring.Telem</code></li> </ul>"},{"location":"monitoring/metrics/#endpoint","title":"Endpoint","text":"<p>To use the metrics feature, send an HTTP request to the <code>/metrics</code> endpoint. The endpoint is secured using Bearer authentication, which requires a JSON Web Token (JWT) generated using the <code>METRICS_JWT_SECRET</code> environment variable. Make sure to set this environment variable with a secure secret key.</p> <p>When a node receives a request for metrics, it polls all nodes in the cluster, accumulates their metrics, and appends service tags such as region and host. To generate a valid JWT, use a library or tool that supports JWT creation with the HS256 algorithm and the <code>METRICS_JWT_SECRET</code> as the secret key.</p> <p>Remember to keep the <code>METRICS_JWT_SECRET</code> secure and only share it with authorized personnel who require access to the metrics endpoint.</p>"},{"location":"monitoring/metrics/#filtered-per-tenant","title":"Filtered per tenant","text":"<p>Metrics endpoints filtered for specific tenants are available at their own endpoints:</p> <pre><code>/metrics/:external_id\n</code></pre>"},{"location":"monitoring/metrics/#system-vm-application-metrics","title":"System, VM &amp; application metrics","text":"<p>The exposed metrics include the following:</p> <ul> <li>Application</li> <li>BEAM</li> <li>Phoenix</li> <li>Ecto</li> <li>System monitoring metrics:</li> <li>CPU utilization</li> <li>RAM usage</li> <li>Load average (LA)</li> </ul>"},{"location":"monitoring/metrics/#tenant-metrics","title":"Tenant metrics","text":"<p>Supavisor also tags many metrics with the <code>tenant</code> <code>external_id</code> so you can drill down to metrics per tenant:</p> <ul> <li>Pool checkout queue time</li> <li>Number of connected clients</li> <li>Query duration and query counts</li> <li>Network usage for client sockets and database sockets</li> </ul>"},{"location":"orms/prisma/","title":"Prisma","text":"<p>Connecting to a Postgres database with Prisma is easy.</p>"},{"location":"orms/prisma/#pgbouncer-compatability","title":"PgBouncer Compatability","text":"<p>Supavisor pool modes behave the same way as PgBouncer. You should be able to connect to Supavisor with the exact same connection string as you use for PgBouncer.</p>"},{"location":"orms/prisma/#named-prepared-statements","title":"Named Prepared Statements","text":"<p>Prisma will use named prepared statements to query Postgres by default.</p> <p>To turn off named prepared statements use <code>pgbouncer=true</code> in your connection string with Prisma.</p> <p>The <code>pgbouncer=true</code> connection string parameter is compatable with Supavisor.</p>"},{"location":"orms/prisma/#prisma-connection-management","title":"Prisma Connection Management","text":"<p>Make sure to review the Prisma connection management guide.</p>"}]}